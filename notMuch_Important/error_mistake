{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "34d68db5-d8cb-4460-a59e-1d288be0ce4a",
   "metadata": {},
   "outputs": [],
   "source": [
    "import cv2\n",
    "import numpy as np\n",
    "from tensorflow.keras.models import load_model\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "42740cd6-d7e0-43af-9a22-580a4f07f44b",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "['.ipynb_checkpoints',\n",
       " '1_data_preprocessing.ipynb',\n",
       " '2_building_model.ipynb',\n",
       " '3_testing_model.ipynb',\n",
       " '4_real_time_implemention.ipynb',\n",
       " 'asl.zip',\n",
       " 'asl_sign_language_model.h5',\n",
       " 'data',\n",
       " 'X_train.npy',\n",
       " 'X_val.npy',\n",
       " 'y_train.npy',\n",
       " 'y_val.npy']"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import os\n",
    "os.listdir()\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "d0013fe9-5d08-4cde-b2bf-f7bc75509997",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "WARNING:absl:Compiled the loaded model, but the compiled metrics have yet to be built. `model.compile_metrics` will be empty until you train or evaluate the model.\n"
     ]
    }
   ],
   "source": [
    "model = load_model('asl_sign_language_model.h5')\n",
    "IMG_SIZE = 64  # Make sure it's the same as training\n",
    "labels = sorted(os.listdir('./data/asl_alphabet_train/asl_alphabet_train'))  # list of class names\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "75ccf142-63ca-4c6a-bb53-e1b865311e05",
   "metadata": {},
   "outputs": [],
   "source": [
    "import threading\n",
    "\n",
    "def run_camera():\n",
    "    cap = cv2.VideoCapture(0)\n",
    "    \n",
    "    while True:\n",
    "        ret, frame = cap.read()\n",
    "        if not ret:\n",
    "            break\n",
    "\n",
    "        # Your existing processing and prediction code\n",
    "        # Example:\n",
    "        roi = frame[y1:y2, x1:x2]\n",
    "        processed = preprocess_image(roi)\n",
    "        prediction = model.predict(processed, verbose=0)\n",
    "        pred_index = np.argmax(prediction)\n",
    "        pred_letter = labels[pred_index]\n",
    "\n",
    "        # Show prediction\n",
    "        cv2.rectangle(frame, (x1, y1), (x2, y2), (255, 0, 0), 2)\n",
    "        cv2.putText(frame, f\"Prediction: {pred_letter}\", (50, 80), cv2.FONT_HERSHEY_SIMPLEX, 1.5, (0, 255, 0), 3)\n",
    "        cv2.imshow(\"Sign Language Recognition\", frame)\n",
    "\n",
    "        if cv2.waitKey(1) & 0xFF == ord('q'):\n",
    "            break\n",
    "\n",
    "    cap.release()\n",
    "    cv2.destroyAllWindows()\n",
    "\n",
    "# Start camera in a new thread\n",
    "threading.Thread(target=run_camera).start()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "3155f5d7-ce74-4d62-94a4-bcdb675e1191",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[[ 36,  32,  30],\n",
       "        [ 35,  32,  31],\n",
       "        [ 34,  32,  31],\n",
       "        ...,\n",
       "        [140, 142, 142],\n",
       "        [140, 143, 144],\n",
       "        [140, 144, 146]],\n",
       "\n",
       "       [[ 36,  32,  30],\n",
       "        [ 35,  32,  31],\n",
       "        [ 34,  32,  31],\n",
       "        ...,\n",
       "        [138, 140, 140],\n",
       "        [138, 141, 142],\n",
       "        [137, 141, 142]],\n",
       "\n",
       "       [[ 35,  32,  30],\n",
       "        [ 34,  32,  31],\n",
       "        [ 34,  32,  31],\n",
       "        ...,\n",
       "        [137, 141, 140],\n",
       "        [136, 139, 139],\n",
       "        [135, 139, 140]],\n",
       "\n",
       "       ...,\n",
       "\n",
       "       [[ 60,  57,  53],\n",
       "        [ 63,  60,  56],\n",
       "        [ 60,  57,  53],\n",
       "        ...,\n",
       "        [118,  90,  77],\n",
       "        [120,  92,  79],\n",
       "        [113,  85,  72]],\n",
       "\n",
       "       [[ 52,  49,  45],\n",
       "        [ 54,  52,  48],\n",
       "        [ 52,  50,  46],\n",
       "        ...,\n",
       "        [113,  85,  74],\n",
       "        [115,  87,  76],\n",
       "        [112,  84,  73]],\n",
       "\n",
       "       [[ 47,  44,  40],\n",
       "        [ 49,  47,  43],\n",
       "        [ 47,  46,  42],\n",
       "        ...,\n",
       "        [105,  77,  66],\n",
       "        [106,  78,  67],\n",
       "        [107,  79,  68]]], dtype=uint8)"
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Define a region (e.g., 300x300 box at center-right for hand signs)\n",
    "x, y, w, h = 300, 100, 300, 300\n",
    "roi = frame[y:y+h, x:x+w]\n",
    "cv2.rectangle(frame, (x, y), (x+w, y+h), (255, 0, 0), 2)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "04f3e555-3435-4436-85fe-6cd244713ef0",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[[ 36,  32,  30],\n",
       "        [ 35,  32,  31],\n",
       "        [ 34,  32,  31],\n",
       "        ...,\n",
       "        [140, 142, 142],\n",
       "        [140, 143, 144],\n",
       "        [140, 144, 146]],\n",
       "\n",
       "       [[ 36,  32,  30],\n",
       "        [ 35,  32,  31],\n",
       "        [ 34,  32,  31],\n",
       "        ...,\n",
       "        [138, 140, 140],\n",
       "        [138, 141, 142],\n",
       "        [137, 141, 142]],\n",
       "\n",
       "       [[ 35,  32,  30],\n",
       "        [ 34,  32,  31],\n",
       "        [ 34,  32,  31],\n",
       "        ...,\n",
       "        [137, 141, 140],\n",
       "        [136, 139, 139],\n",
       "        [135, 139, 140]],\n",
       "\n",
       "       ...,\n",
       "\n",
       "       [[ 60,  57,  53],\n",
       "        [ 63,  60,  56],\n",
       "        [ 60,  57,  53],\n",
       "        ...,\n",
       "        [118,  90,  77],\n",
       "        [120,  92,  79],\n",
       "        [113,  85,  72]],\n",
       "\n",
       "       [[ 52,  49,  45],\n",
       "        [ 54,  52,  48],\n",
       "        [ 52,  50,  46],\n",
       "        ...,\n",
       "        [113,  85,  74],\n",
       "        [115,  87,  76],\n",
       "        [112,  84,  73]],\n",
       "\n",
       "       [[ 47,  44,  40],\n",
       "        [ 49,  47,  43],\n",
       "        [ 47,  46,  42],\n",
       "        ...,\n",
       "        [105,  77,  66],\n",
       "        [106,  78,  67],\n",
       "        [107,  79,  68]]], dtype=uint8)"
      ]
     },
     "execution_count": 15,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from collections import deque, Counter\n",
    "\n",
    "pred_queue = deque(maxlen=10)\n",
    "# Inside the loop after prediction:\n",
    "pred_queue.append(pred_letter)\n",
    "most_common = Counter(pred_queue).most_common(1)[0][0]\n",
    "cv2.putText(frame, f\"Prediction: {most_common}\", (50, 80), \n",
    "            cv2.FONT_HERSHEY_SIMPLEX,       # fontFace\n",
    "            1.5,                             # fontScale\n",
    "            (0, 255, 0),                     # color (green)\n",
    "            2)                               # thickness\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "96d807a3-1b1b-4d2e-bb25-6c18d4420bf8",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.12.6"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
